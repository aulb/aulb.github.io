{"version":3,"file":"1dd1477de467881375cba281091a9721473487d4-584c01f4a73df8cddf68.js","mappings":"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","sources":["webpack://albert.wtf/./src/components/footer.js","webpack://albert.wtf/./src/components/header.js","webpack://albert.wtf/./src/components/header.module.css","webpack://albert.wtf/./src/components/layout.js","webpack://albert.wtf/./src/components/playlistCard.module.css","webpack://albert.wtf/./src/components/playlistCard.js","webpack://albert.wtf/./src/components/playlistCards.js","webpack://albert.wtf/./src/components/playlistCards.module.css","webpack://albert.wtf/./src/components/seo.js","webpack://albert.wtf/./src/hooks/useSiteMetadata.js","webpack://albert.wtf/./src/components/layout.module.css"],"sourcesContent":["import * as React from 'react'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\nimport { Link } from 'gatsby'\n\nconst Footer = () => {\n  const data = useSiteMetadata()\n  const { github, instagram, linkedin, goodreads } = data\n  return (\n    <div>\n      <Link to={github} target=\"_blank\">github</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to={instagram} target=\"_blank\">instagram</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to={linkedin} target=\"_blank\">linkedin</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to={goodreads} target=\"_blank\">goodreads</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to=\"/copyright\">&copy;</Link> 2014 - {(new Date()).getFullYear()}\n      </div>\n  )\n}\n\nexport default Footer\n","import * as React from 'react'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\nimport {\n  siteTitle,\n} from \"./header.module.css\"\n\nconst Header = ({pageTitle}) => {\n  const data = useSiteMetadata()\n  return (\n    <h1 className={siteTitle}>\n      {\n        pageTitle == null ? \n          data?.title :\n          pageTitle\n      }\n    </h1>\n  )\n}\n\nexport default Header\n","// extracted by mini-css-extract-plugin\nexport var siteTitle = \"header-module--siteTitle--0667c\";","import * as React from 'react'\nimport {\n  main,\n  container,\n} from './layout.module.css'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\nimport { Link } from 'gatsby'\nimport Footer from './footer'\nimport Header from './header'\n\nconst Layout = ({ children, pageTitle = null }) => {\n  const data = useSiteMetadata()\n  return (\n    <div className={container}>\n      <Link to=\"/\">\n        <Header pageTitle={pageTitle} data={data} />\n      </Link>\n      <main className={main}>\n        {children}\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout\n","// extracted by mini-css-extract-plugin\nexport var card = \"playlistCard-module--card--92f0c\";\nexport var cardImage = \"playlistCard-module--cardImage--45766\";\nexport var cardText = \"playlistCard-module--cardText--974d6\";\nexport var cardTextWrapper = \"playlistCard-module--cardTextWrapper--97df4\";","import * as React from \"react\"\nimport {\n  card,\n  cardImage,\n  cardText,\n  cardTextWrapper,\n} from \"./playlistCard.module.css\"\nimport {useState} from \"react\"\n\nconst brightenColor = (color, brightness=0.75) => {\n  return [\n    Math.floor(color[0] + (255 - color[0]) * brightness),\n    Math.floor(color[1] + (255 - color[0]) * brightness),\n    Math.floor(color[2] + (255 - color[0]) * brightness),\n  ]\n}\n\nconst determineCardColor = genres => {\n  if (genres == null) {\n    return null\n  }\n  let totalCount = 0\n  let rgb = [0, 0, 0]\n  genres.map(genre => {\n    const { color, count } = genre\n    if (color == null || color.length !== 3) {\n      return\n    }\n\n    totalCount = totalCount + genre.count\n    rgb[0] = rgb[0] + count * color[0]\n    rgb[1] = rgb[1] + count * color[1]\n    rgb[2] = rgb[2] + count * color[2]\n  })\n  // Exaggerate the blue values\n  rgb = [rgb[0] * 0.8, rgb[1] * 0.975, rgb[2] * 2.25]\n  return rgb.map(value => Math.min(255, Math.floor(value / totalCount)))\n}\n\nconst PlaylistCard = ({playlist, index, genres=null}) => {\n  const [hover, setHover] = useState(false)\n  const { images, name, external_urls, tracks, created_at } = playlist\n  const image = images.length > 0 ? images[0] : null\n  const createdAt = new Date(created_at);\n  const createdAtStr = createdAt.toLocaleString(\"en-US\", {month: \"short\", day: \"2-digit\"});\n  const cardColor = brightenColor(determineCardColor(genres?.genres), 0.85)\n  const cardColorHover = brightenColor(determineCardColor(genres?.genres), 0.8)\n  const backgroundColorStyle = `rgb(${cardColor[0]}, ${cardColor[1]}, ${cardColor[2]})`\n  const backgroundColorHoverStyle = `rgb(${cardColorHover[0]}, ${cardColorHover[1]}, ${cardColorHover[2]})`\n\n  return (\n    <div \n      className={card} \n      style={{backgroundColor: hover ? backgroundColorHoverStyle : backgroundColorStyle}}\n      onMouseEnter={() => setHover(true)} \n      onMouseLeave={() => setHover(false)}\n    >\n      <a href={external_urls.spotify} target=\"_blank\">\n          <img className={cardImage} alt={name} src={image?.url} />\n      </a>\n      <div className={cardTextWrapper}>\n          <p className={cardText}>{index === 0 ? \"ðŸ“Œ\" : \"\"} <strong>{name}</strong></p>\n          <p className={cardText}>{createdAtStr} Â· {tracks.total} {tracks.total > 1 ? \"songs\" : \"song\"}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default PlaylistCard\n","import * as React from \"react\"\nimport PlaylistCard from \"./playlistCard\"\nimport SpotifyJSONData from \"../data/current_playlist.json\"\nimport {\n  showAllText,\n  showAllContainer,\n  mainContainer,\n  cardContainer,\n} from \"./playlistCards.module.css\"\nimport {useState} from \"react\";\nimport PlaylistsGenres from '../data/playlists_and_genres.json'\n\nconst sortPlaylistByMostRecent = (playlistA, playlistB) => {\n  const createdAtA = new Date(playlistA.created_at) \n  const createdAtB = new Date(playlistB.created_at) \n  if (createdAtA > createdAtB) return -1\n  if (createdAtA < createdAtB) return 1\n  return 0\n}\n\nconst findPlaylistGenres = (playlistGenres, name) => {\n  const match = playlistGenres.filter(playlistGenre => playlistGenre.name === name)\n  return match.length === 0 ? null : match[0]\n}\n\nconst PlaylistCards = ({ \n  maxCard = 4, \n  includeHeader = true, \n  includeShowAll = true,\n}) => {\n  const [expanded, setExpanded] = useState(false)\n  const playlists = SpotifyJSONData.items\n    .filter(playlist => playlist.public)\n    .sort(sortPlaylistByMostRecent)\n    .slice(0, expanded ? SpotifyJSONData.items.length : maxCard)\n  const shouldRenderShowAllContainer = includeHeader || includeShowAll\n\n  return (\n    <div className={mainContainer}>\n      {\n        shouldRenderShowAllContainer ?\n          <div className={showAllContainer}>\n            { includeShowAll ?\n                <div onClick={() => setExpanded(!expanded)} className={showAllText}>\n                  {\n                    expanded ? \"Show latest only\" : \"Show all\"\n                  }\n                </div> : <div></div>\n            }\n            {\n              includeHeader ?\n                <div>\n                  <strong>My monthly playlist</strong>\n                </div> : <div></div>\n            }\n          </div> : null\n      }\n      <div className={cardContainer}>\n        {\n          playlists.map((playlist, index) => \n            <PlaylistCard key={playlist.id} playlist={playlist} index={index} genres={findPlaylistGenres(PlaylistsGenres, playlist.name)} />\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default PlaylistCards\n","// extracted by mini-css-extract-plugin\nexport var cardContainer = \"playlistCards-module--cardContainer--a8f9f\";\nexport var mainContainer = \"playlistCards-module--mainContainer--823db\";\nexport var showAllContainer = \"playlistCards-module--showAllContainer--79145\";\nexport var showAllText = \"playlistCards-module--showAllText--25cfd\";","import * as React from 'react'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\n\nconst Seo = ({ title }) => {\n  const data = useSiteMetadata()\n  return (\n    <title>\n      {title == null ? '' : `${title} | `}{data?.title}\n    </title>\n  )\n}\n\nexport default Seo","import { graphql, useStaticQuery } from 'gatsby'\n\nconst useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          github\n          instagram\n          linkedin\n          goodreads\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n\nexport default useSiteMetadata","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var main = \"layout-module--main--e5529\";"],"names":["data","useSiteMetadata","github","instagram","linkedin","goodreads","Link","to","target","Date","getFullYear","pageTitle","className","title","children","container","main","cardText","brightenColor","color","brightness","Math","floor","determineCardColor","genres","totalCount","rgb","map","genre","count","length","value","min","playlist","index","hover","setHover","useState","images","name","external_urls","tracks","created_at","image","createdAtStr","toLocaleString","month","day","cardColor","cardColorHover","backgroundColorStyle","backgroundColorHoverStyle","style","backgroundColor","onMouseEnter","onMouseLeave","href","spotify","alt","src","url","total","sortPlaylistByMostRecent","playlistA","playlistB","createdAtA","createdAtB","findPlaylistGenres","playlistGenres","match","filter","playlistGenre","maxCard","includeHeader","includeShowAll","expanded","setExpanded","playlists","SpotifyJSONData","public","sort","slice","shouldRenderShowAllContainer","onClick","key","id","PlaylistsGenres","useStaticQuery","site","siteMetadata"],"sourceRoot":""}