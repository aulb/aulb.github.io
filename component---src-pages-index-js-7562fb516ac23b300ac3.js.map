{"version":3,"file":"component---src-pages-index-js-7562fb516ac23b300ac3.js","mappings":"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","sources":["webpack://albert.wtf/./src/components/footer.js","webpack://albert.wtf/./src/components/layout.js","webpack://albert.wtf/./src/components/seo.js","webpack://albert.wtf/./src/hooks/useSiteMetadata.js","webpack://albert.wtf/./src/components/spotifyPlaylists.js","webpack://albert.wtf/./src/components/spotifyPlaylists.module.css","webpack://albert.wtf/./src/pages/index.js","webpack://albert.wtf/./src/components/layout.module.css"],"sourcesContent":["import * as React from 'react'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\nimport { Link } from 'gatsby'\n\nconst Footer = () => {\n  const data = useSiteMetadata()\n  const { github, instagram, linkedin, goodreads } = data\n  return (\n    <div>\n      &copy; 2014 - {(new Date()).getFullYear()}\n      &nbsp;â€¢&nbsp;\n      <Link to={github} target=\"_blank\">github</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to={instagram} target=\"_blank\">instagram</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to={linkedin} target=\"_blank\">linkedin</Link>\n      &nbsp;â€¢&nbsp;\n      <Link to={goodreads} target=\"_blank\">goodreads</Link>\n    </div>\n  )\n}\n\nexport default Footer\n","import * as React from 'react'\nimport {\n  container,\n  siteTitle,\n} from './layout.module.css'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\nimport { Link } from 'gatsby'\nimport Footer from './footer'\n\nconst Layout = ({ children, pageTitle = null }) => {\n  const data = useSiteMetadata()\n  return (\n    <div className={container}>\n      <Link to=\"/\">\n        <header className={siteTitle}>\n          {\n            pageTitle == null ? \n              data?.title :\n              pageTitle\n          }\n        </header>\n      </Link>\n      <main>\n        {children}\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout","import * as React from 'react'\nimport useSiteMetadata from '../hooks/useSiteMetadata'\n\nconst Seo = ({ title }) => {\n  const data = useSiteMetadata()\n  return (\n    <title>\n      {title == null ? '' : `${title} | `}{data?.title}\n    </title>\n  )\n}\n\nexport default Seo","import { graphql, useStaticQuery } from 'gatsby'\n\nconst useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          github\n          instagram\n          linkedin\n          goodreads\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n\nexport default useSiteMetadata","import * as React from 'react'\nimport SpotifyJSONData from '../data/current_playlist.json'\nimport PlaylistsGenres from '../data/playlists_and_genres.json'\nimport { Link } from 'gatsby'\nimport {\n  playlistMainContainer,\n  playlistContainer,\n  playlistCube,\n  playlistCubeContainer,\n} from './spotifyPlaylists.module.css'\n\nconst SpotifyPlaylists = () => {\n  const { items } = SpotifyJSONData\n  const playlistsGenres = PlaylistsGenres.sort((playlistA, playlistB) => {\n    const createdAtA = new Date(playlistA.created_at)\n    const createdAtB = new Date(playlistB.created_at)\n    if (createdAtA > createdAtB) return -1;\n    if (createdAtA < createdAtB) return 1;\n    return 0\n  })\n  return (\n    <div>\n      {/* <div className={playlistMainContainer}>\n        {\n          items?.map(playlist => {\n            if (playlist.public === false) {\n              return null;\n            }\n            const { images, name, external_urls } = playlist\n            const image = images.length > 0 ? images[0] : null\n            return (\n              <div className={playlistContainer} title={name}>\n                <Link to={external_urls.spotify} target=\"_blank\">\n                  <img alt={name} src={image?.url} height={90} width={90} />\n                </Link>\n              </div>\n            )\n          })\n        }\n      </div> */}\n      <div>\n        {\n          playlistsGenres?.map(playlist => {\n            let totalGenreXCounter = 0\n            let genreWidthBuffer = 0\n            const sortedGenres = playlist?.genres?.sort((genreA, genreB) => {\n              if (genreA.pca > genreB.pca) return -1;\n              if (genreA.pca < genreB.pca) return 1;\n              return 0\n            }) || []\n            sortedGenres.forEach(genre => {\n              totalGenreXCounter = totalGenreXCounter + genre[\"count\"]\n            })\n            return (\n              <div className={playlistCubeContainer}>\n                {\n                  sortedGenres?.map((genre, index) => {\n                    const color = genre[\"color\"]\n                    const rgb = `rgb(${color[0]}, ${color[1]}, ${color[2]})`\n                    let width = parseFloat((genre[\"count\"] / totalGenreXCounter * 100).toFixed(2))\n                    genreWidthBuffer = index !== sortedGenres.length - 1 ? genreWidthBuffer + width : genreWidthBuffer\n                    if (index === sortedGenres.length - 1) {\n                      const overshoot = parseFloat(Math.abs(100 - genreWidthBuffer).toFixed(2))\n                      if (genreWidthBuffer >= 100) {\n                        width = width - overshoot\n                      } else {\n                        width = width + overshoot\n                      }\n                    }\n                    return (\n                      <div title={genre[\"name\"]} className={playlistCube} style={{\n                        background: rgb,\n                        width: `${width.toFixed(2)}%`,\n                      }} />\n                    )\n                  })\n                }\n              </div>\n            )\n          })\n        }        \n      </div>\n    </div>\n  )\n}\n\nexport default SpotifyPlaylists","// extracted by mini-css-extract-plugin\nexport var playlistContainer = \"spotifyPlaylists-module--playlistContainer--a50b6\";\nexport var playlistCube = \"spotifyPlaylists-module--playlistCube--3e23a\";\nexport var playlistCubeContainer = \"spotifyPlaylists-module--playlistCubeContainer--e5dd5\";\nexport var playlistMainContainer = \"spotifyPlaylists-module--playlistMainContainer--ab781\";","import * as React from 'react'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\nimport SpotifyPlaylists from '../components/spotifyPlaylists'\nimport { Link } from 'gatsby'\n\nconst IndexPage = () => {\n\n  return (\n      <Layout>\n        <p>\n          Hello welcome to my page! <br />\n          I'm currently a SWE based in San Francisco ðŸŒ‰.<br /> \n          Current interests: <Link to=\"https://www.usajapan.org/japanese-language-classes/japanese-group-classes/\">Japanese learning</Link>, <Link to=\"https://www.clayroomsf.com/\">studio pottery</Link>, light reading, overnight oats, and coffee. <br />\n          My recent monthly Spotify visualized: <br />\n          <SpotifyPlaylists />\n          Last updated: 05/01/2023\n        </p>\n      </Layout>\n    )\n}\n\nexport const Head = () => (\n  <>\n    <Seo />\n    <meta name=\"description\" content=\"albert.wtf\" />\n  </>\n)\n\nexport default IndexPage","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var heading = \"layout-module--heading--f158c\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinkText = \"layout-module--nav-link-text--69cda\";\nexport var navLinks = \"layout-module--nav-links--1113b\";\nexport var siteTitle = \"layout-module--site-title--e4dea\";"],"names":["data","useSiteMetadata","github","instagram","linkedin","goodreads","Date","getFullYear","to","target","children","pageTitle","className","container","siteTitle","title","useStaticQuery","site","siteMetadata","items","SpotifyJSONData","playlistsGenres","PlaylistsGenres","playlistA","playlistB","createdAtA","created_at","createdAtB","map","playlist","totalGenreXCounter","genreWidthBuffer","sortedGenres","genres","sort","genreA","genreB","pca","forEach","genre","index","color","rgb","width","parseFloat","toFixed","length","overshoot","Math","abs","style","background","Head","name","content"],"sourceRoot":""}